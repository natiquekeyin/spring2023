REACT:

    1)MEAN[MongoDB ExpressJS AngularJS NodeJS]
    2)MERN[MongoDB ExpressJS ReactJS NodeJS]

    MongoDB: is the database part, that can store all the related data of a web application

    ExpressJS: is responsible for settting up the "servers"..i)Static Website, ii)Dynamic Websites...
        i)static websites: That show same content to every user ...HTML,CSS,JS ...www.myresume.com[index.html,style.css]...that will always show my static page that contains my resume.."client side scripts"
        ii) dynamic websites: that show different contents to different users...Weather website...Hockey game 0 1 ...2 3...facebook.com.. if enter my user name and id .. I will get my feeds..[ASP.net,PHP,JSP(Java Server Pages) were server side technologies.."JAVASCRIPT"]
        "server side script".. EXPRESS JS...
    NodeJS: is the runtime that allows JavaScript do wonders...
        that enables JS to run NOT ONLY on client side BUT ALSO on servers as well on Console Based applications...[JS was primarily ONLY client side scripting language when it was born..with "NODEJS", first we got the ability to use JS to create Servers...] [JS was primarily ONLY FOR web development, BUT NodeJS enable JS to work on "Console Based" applicaitons... means desktop based applications...]

    Angular:
    React:[UI] A front-end library that enables developers to create HIGHLY responsive and intuitive User Interfaces suitable for all types of devices....Front-end HTML, CSS, JS...are the basis to learn React...

    Full Stack Developer! React...
    Express, MongoDB, NodeJS

    index.html,contact.html,about.html,history.html,products.html,purchase.html....

REACT:
    A front-end library that enables developers to create HIGHLY responsive and intuitive User Interfaces(UIs) suitable for all types of devices.
    SPA: Single Page Applications:We only have one page in React app..."index.html"... 
    Components: Are reusable elements that can load themselves with new contents WITHOUT requesting servers over and over....

How to make and run React app!

NEVER SEND NODE_MODULES FOLDER TO ME IN ANY SUBMISSION...

Lecture June 6,2023:

NEVER FORGET TO SEND "package.json" IN YOUR SUBMISSION...
THIS "package.json" file is used to install or get access to all libraries and files that we need to run a project with...

1. public/index.html:
    This is the "SP" that runs when a react application runs...
    It only has <div id="root"> </div>....and everythingn that we see is somehow injected here....
2. src/index.js:
    This is a file that takes hold of "root" area of index.html and creates a root element in ReactDOM[a virtual DOM that react creates for its applications...] and renders the "<App/> ... COMPONENT".. into that area...
3. src/App.js:
    App is a "component".. a very important or "main" component that runs when react applciation runs....

N.B: Every component should start with a capital letter..

Components:
    Reusable areas that can be loaded with different data..without requesting the server...
    App is the main component in react applciations...
    We can make our own components are run insdie App component...

    ALL Components return "JSX" which is a combination of "HTML","CSS" and "JAVASCRIPT"...

    They are just like normal functions, BUT they return JSX...

    JSX is the combination of HTML,CSS and JavaScript...
    Types of Components:
        1.Class Components
        2.Function Components.


Function Components:

import logo from "./logo.svg";
import "./App.css";

function App() {
  var fname = "Alan";
  var age = 20;
  return (
    <div className="App">
      <h1>My First Application - {fname.toUpperCase()}</h1>
      <p>React is fun to learn!!!!and you are {age} years old!!</p>
    </div>
  );
  // the above all is "jsx.."
}

export default App;


Fragments in React:
<> </>
This is called fragment in react.. it wraps around all the "JSX" to make it in one container...THEY DONOT PRODUCE ANY CODE...

SO, the jsx should be wrapped in a single container..be it a <div></div> OR a fragment....