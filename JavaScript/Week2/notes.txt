Submission of Assignments:

frank_practice1 | Name of the folder
frank_qap1

yourFirstName_assignmentName [ frank_qap2]

NO SPACES IN THE NAME OF THE FOLDER : IMPORTANT!!!

camelCase?? snake_case ?? PascalCase ?? kebab-case [css: background-color:blue]

holloway_practice1
Davies_practice1

ALWAYS WRITE YOUR NAME, DATE, ASSIGNEMNT NAME ON TOP OF THE FILE LIKE FOLLOWING:

<!--  Developer Name: Evan Holloway  Date: May 9,2023 Assignemnt: QAP1      -->

/*  Developer Name: Evan Holloway  Date: May 9,2023 Assignemnt: QAP1     */

ALWAYS VALIDATE YOUR HTML FILE BEFORE SUBMISSION...


Week2 notes! JavaScript 

DOM PROGRAMMING:

HTML -> DOM <- JS!

DOM: Document Object Model

is an API (Application Programming Interface) [ a piece of software that enables different softwares to talk to each other]

DOM is an API that enables HTML to talk to JS and vice versa![HTML & JS Communcation!]

Valid HTML Document?

DOM Tree:
The html document is represented as an upside down tree (DOM_TREE.jpg). The top NODE is called "root element" and rest all nodes are childs of root node... 
In DOM Tree every element of HTML represent one "NODE" ...
And the text section inside nodes is called "Text Node"....

SO, document is the main object that deals with the "DOM tree" and enables us to manipulate the different elements of our html document.

var myTitle = document.title;

This will define a variable "myTitle" and store the current title of the document inside it....

Strings in JavaScript:

"hello" ...
'hello' ...
`hello` ...
---------------------------------------------------------------
Lecture May 10,2023

var links;
links = document.links;


Programming the DOM:

Web pages are dynamic:they can change in response to user actions, different data, JavaScript code etc.
Where HTML defines the initial structure of the page, the DOM is the current or actual content of the page as its exists right now in browser...

The DOM is a programming interface(ie. set of Objects, functions, properties) allowing scripts to interact with and modify documents (html). 

Tasks in DOM:
1. Finding and getting references to elements in the page
2. Creating, Adding, and removing elements from DOM Tree.
3. Inspecting and modifying elements and their contents.
4. Run code in response to events triggered by the user, browser, or other parts of our code.

1. Finding elements in the DOM with JavaScript:
 we can directly find some special sections of the html document like ...
    document.head
    document.title
    document.links
    document.images

Methods: 
 i) getElementById(id) returns an element whose id attribute/property has the given id string...

 ii) querySelector(selectors) 
 iii) querySelectorAll(selectors):
 similar to getElementById, but also allows querying the DOM using CSS selectors for an element that does not have a unique id...

  a) tag selector [ a{color:blue} ]
  document.querySelector("h1");
  b) id selector [ #p2{color:red} ]
  document.querySelector("#link2");
  c) class selector [ .demo{color:green}]
    document.querySelector(".demo");
    

2. Creating elements and Modifying the DOM with JavaScript:

    i) document.createElement(name) - creates and returns a new element of the type specified by the "name"
    ii) document.createTextNode(text) - creates a text node (the text withing an element vs the element itself)

    --------------------------------


    Lecture May 11,2023

After creating a new element: following are the properties that we can set up...

    innerText:Considers everything as text (regardless if there are any elements..)
    innerHTML: It renders all the html elements given in the value of it...
    

3. Inspecting and modifying elements and their contents:
    Once we have a reference to an element in javascript, we can use a number of properites and methods to work with it...

    i)element.id:
    ii)element.innerHTML:
    iii)element.parentNode:
    iv)element.nextSibling:
    v)element.className:
    vi)element.innerText:

4. Run code in response to events triggered by the user, browser, or other parts of our code:
Events? 
    i) user clicks a button
    ii) moving the mouse
    iii) pressing a key
    iv) changing tabs in browser
    v) Timers, message from a background process, report from a sensors..

Event Drive Programming:

There will be some event handlers, that will handle and run the respective code when some event occurs

e.g: events are like light switches flipping a light switch on or off triggers and action in the light fixture...

We can register a DOM event handler for a given event in one of two ways:

1. element.onevent = function(){ }
2. element.addEventListener('event', function(){ });



